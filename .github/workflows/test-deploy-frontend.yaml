name: Run tests
on:
  pull_request:
    branches:
      - staging
      - main
  push:
    branches:
      - staging
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        if: always()
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run lint, test and build checks
        run: |
          npm run lint
          npm test
          npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variable based on branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
              echo "ENV=staging" >> $GITHUB_ENV
              echo "NODE=STAGING" >> $GITHUB_ENV
            elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "ENV=production" >> $GITHUB_ENV
              echo "NODE=PRODUCTION" >> $GITHUB_ENV
            else
              echo "ENV=development" >> $GITHUB_ENV
              echo "NODE=DEV" >> $GITHUB_ENV
          fi

      - name: Set variable names based on environment
        run: |
          echo "CLOUD_RUN_DEPLOY_NODE_ENV=${ENV}-stak-frontend" >> $GITHUB_ENV
          echo "AUTH0_CLIENT_SECRET=${NODE}_AUTH0_CLIENT_SECRET" >> $GITHUB_ENV
          echo "AUTH0_MANAGEMENT_CLIENT_SECRET=${NODE}_AUTH0_MANAGEMENT_CLIENT_SECRET" >> $GITHUB_ENV
          echo "AUTH0_SECRET=${NODE}_AUTH0_SECRET" >> $GITHUB_ENV
          echo "AGAVE_CLIENT_SECRET=${NODE}_AGAVE_CLIENT_SECRET" >> $GITHUB_ENV
          echo "GOOGLEMAPS_API_KEY=${NODE}_GOOGLEMAPS_API_KEY" >> $GITHUB_ENV
          echo "AUTH0_MANAGEMENT_CLIENT_ID=${{ vars[format('{0}_AUTH0_MANAGEMENT_CLIENT_ID', env.NODE)] }}" >> $GITHUB_ENV
          echo "AGAVE_CLIENT_ID=${{ vars[format('{0}_AGAVE_CLIENT_ID', env.NODE)] }}" >> $GITHUB_ENV
          echo "AUTH0_CLIENT_ID=${{ vars[format('{0}_AUTH0_CLIENT_ID', env.NODE)] }}" >> $GITHUB_ENV
          echo "AUTH0_TENANT=${{ vars[format('{0}_AUTH0_TENANT', env.NODE)] }}" >> $GITHUB_ENV
          echo "AUTH0_BASE_URL=${{ vars[format('{0}_AUTH0_BASE_URL', env.NODE)] }}" >> $GITHUB_ENV
          echo "AUTH0_ISSUER_BASE_URL=${{ vars[format('{0}_AUTH0_ISSUER_BASE_URL', env.NODE)] }}" >> $GITHUB_ENV
          echo "AUTH0_API_AUDIENCE=${{ vars[format('{0}_AUTH0_API_AUDIENCE', env.NODE)] }}" >> $GITHUB_ENV
          echo "POST_LOGOUT_REDIRECT_URI=${{ vars[format('{0}_POST_LOGOUT_REDIRECT_URI', env.NODE)] }}" >> $GITHUB_ENV
          echo "REDIRECT_URI=${{ vars[format('{0}_REDIRECT_URI', env.NODE)] }}" >> $GITHUB_ENV
          echo "TARGET_AUDIENCE=${{ vars[format('{0}_TARGET_AUDIENCE', env.NODE)] }}" >> $GITHUB_ENV

      - id: auth
        name: Authenticate to google cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/${{vars.GOOGLE_CLOUD_PROJECT}}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: stak-firestore-service-account@${{vars.PROJECT_ID}}.iam.gserviceaccount.com

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      # Authenticate Docker to Artifact Registry using gcloud
      - name: Authenticate Docker to Artifact Registry
        run: gcloud auth configure-docker ${{vars.US_MULTI_REGION}}-docker.pkg.dev

      # Build the Docker image
      - name: Build and push docker image to artifact registry
        run: |
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          TAG="$ENV-$TIMESTAMP"
          echo "TAG=$TAG" >> $GITHUB_ENV
          docker build -t ${{vars.US_MULTI_REGION}}-docker.pkg.dev/${{vars.PROJECT_ID}}/${{vars.ARTIFACT_REPOSITORY_NAME}}/$CLOUD_RUN_DEPLOY_NODE_ENV:$TAG .
          docker push ${{vars.US_MULTI_REGION}}-docker.pkg.dev/${{vars.PROJECT_ID}}/${{vars.ARTIFACT_REPOSITORY_NAME}}/$CLOUD_RUN_DEPLOY_NODE_ENV:$TAG
        id: build_and_push

      # Deploy the latest container to cloud run
      - name: Deploy cloud run revision with latest container
        run: |
          gcloud run deploy $CLOUD_RUN_DEPLOY_NODE_ENV \
            --set-env-vars NEXT_PUBLIC_STAK_NODE_ENV=$ENV,NEXT_PUBLIC_STAGING_API_URL=https://staging-api.stak.cc,NEXT_PUBLIC_PRODUCTION_API_URL=https://api.stak.cc,TARGET_AUDIENCE=$TARGET_AUDIENCE,AUTH0_CLIENT_ID=$AUTH0_CLIENT_ID,AUTH0_MANAGEMENT_CLIENT_ID=$AUTH0_MANAGEMENT_CLIENT_ID,AUTH0_TENANT=$AUTH0_TENANT,AUTH0_ISSUER_BASE_URL=$AUTH0_ISSUER_BASE_URL,AUTH0_BASE_URL=$AUTH0_BASE_URL,AUTH0_API_AUDIENCE=$AUTH0_API_AUDIENCE,REDIRECT_URI=$REDIRECT_URI,POST_LOGOUT_REDIRECT_URI=$POST_LOGOUT_REDIRECT_URI,AGAVE_CLIENT_ID=$AGAVE_CLIENT_ID,AGAVE_TOKEN_CREATE_URL=${{vars.AGAVE_TOKEN_CREATE_URL}},AGAVE_API_VERSION=${{vars.AGAVE_API_VERSION}},TZ=${{vars.TIMEZONE}} \
            --image ${{vars.US_MULTI_REGION}}-docker.pkg.dev/${{vars.PROJECT_ID}}/${{vars.ARTIFACT_REPOSITORY_NAME}}/$CLOUD_RUN_DEPLOY_NODE_ENV:$TAG \
            --update-secrets GOOGLEMAPS_API_KEY=$GOOGLEMAPS_API_KEY:latest,AUTH0_MANAGEMENT_CLIENT_SECRET=$AUTH0_MANAGEMENT_CLIENT_SECRET:latest,AUTH0_CLIENT_SECRET=$AUTH0_CLIENT_SECRET:latest,AUTH0_SECRET=$AUTH0_SECRET:latest,AGAVE_CLIENT_SECRET=$AGAVE_CLIENT_SECRET:latest \
            --region us-central1 \
            --platform managed \
            --memory 2Gi \
            --cpu 1 \
            --timeout 300s \
            --concurrency 80 \
            --min-instances 0 \
            --max-instances 10 \
            --service-account cloud-run@${{vars.PROJECT_ID}}.iam.gserviceaccount.com
